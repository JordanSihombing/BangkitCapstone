const express = require('express');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const bodyParser = require('body-parser');
const mysql = require('mysql');

const app = express();
const PORT = 3000;

app.use(bodyParser.json());

// Google Cloud SQL connection configuration
const dbConfig = {
  user: 'your_db_user',
  password: 'your_db_password',
  database: 'your_db_name',
  socketPath: '/cloudsql/your_project_id:your_region:your_instance_name',
};

// Create a connection pool
const pool = mysql.createPool(dbConfig);

// Signup route
app.post('/api/signup', async (req, res) => {
  const { username, password } = req.body;

  // Hash the password
  const hashedPassword = await bcrypt.hash(password, 10);

  // Insert the user into the database
  const query = 'INSERT INTO users (username, password) VALUES (?, ?)';
  pool.query(query, [username, hashedPassword], (error) => {
    if (error) {
      return res.status(500).json({ message: 'Error registering user' });
    }
    return res.json({ message: 'User registered successfully' });
  });
});

// Login route
app.post('/api/login', async (req, res) => {
  const { username, password } = req.body;

  // Retrieve the user from the database
  const query = 'SELECT * FROM users WHERE username = ?';
  pool.query(query, [username], async (error, results) => {
    if (error) {
      return res.status(500).json({ message: 'Error retrieving user' });
    }

    const user = results[0];

    if (user && await bcrypt.compare(password, user.password)) {
      // Generate a JWT token
      const token = jwt.sign({ username }, 'your_secret_key', { expiresIn: '1h' });
      return res.json({ token });
    }

    return res.status(401).json({ message: 'Invalid username or password' });
  });
});

app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});
